"""Add slug to department table

Revision ID: d935982df61e
Revises: f033e3e5e21f
Create Date: 2025-04-27 14:20:38.946803

"""

import re
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "d935982df61e"
down_revision: Union[str, None] = "f033e3e5e21f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def generate_slug(title: str) -> str:
    """Generate a URL-friendly slug from a title."""
    # Remove all non-word characters (except spaces and hyphens)
    slug = re.sub(r"[^\w\s-]", "", title.strip().lower())
    # Replace spaces and hyphens with a single hyphen
    slug = re.sub(r"[-\s]+", "-", slug)
    return slug


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("department", sa.Column("slug", sa.String(length=100), nullable=True))
    # ### end Alembic commands ###

    conn = op.get_bind()
    # Get all existing employees
    departments = conn.execute(sa.text("SELECT id, title FROM department")).fetchall()

    # Generate and update slugs for each employee
    for dep in departments:
        slug = generate_slug(dep.title)
        conn.execute(
            sa.text("UPDATE department SET slug = :slug WHERE id = :id"),
            {"slug": slug, "id": dep.id},
        )

    # Make slug column non-nullable and add unique constraint
    op.alter_column("department", "slug", nullable=False)
    op.create_unique_constraint(op.f("uq_department_slug"), "department", ["slug"])


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("uq_department_slug"), "department", type_="unique")
    op.drop_column("department", "slug")
    # ### end Alembic commands ###
